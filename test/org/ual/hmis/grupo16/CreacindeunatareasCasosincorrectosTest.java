package org.ual.hmis.grupo16;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxOptions;

public class CreacindeunatareasCasosincorrectosTest {
	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;
	@Before
	  public void setUp() {
	    // Browser selector
	    int browser= 0; // 0: firefox, 1: chrome,...
	    Boolean headless = true;

	    switch (browser) {
	    case 0:  // firefox
	    	// Firefox
	    	// Descargar geckodriver de https://github.com/mozilla/geckodriver/releases
	    	// Descomprimir el archivo geckodriver.exe en la carpeta drivers

	    	System.setProperty("webdriver.gecko.driver",  "drivers/geckodriver.exe");
	    	FirefoxOptions firefoxOptions = new FirefoxOptions();
	    	if (headless) firefoxOptions.setHeadless(headless);
	    	driver = new FirefoxDriver(firefoxOptions);

	    	break;
	    case 1: // chrome
	    	// Chrome
	    	// Descargar Chromedriver de https://chromedriver.chromium.org/downloads
	    	// Descomprimir el archivo chromedriver.exe en la carpeta drivers

	    	System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
	    	ChromeOptions chromeOptions = new ChromeOptions();
	    	if (headless) chromeOptions.setHeadless(headless);
	    	chromeOptions.addArguments("window-size=1920,1080");
	    	driver = new ChromeDriver(chromeOptions);

	    	break;

	    default:
	    	fail("Please select a browser");
	    	break;
	    }
	    js = (JavascriptExecutor) driver;
	    vars = new HashMap<String, Object>();
	  }

	@After
	public void tearDown() {
		driver.quit();
	}

	@Test
	public void creacindeunatareasCasosincorrectos() {
		// Test name: Creaci√≥n de una tareas (Casos incorrectos)
		// Step # | name | target | value
		// 1 | open | https://dotnetappsqldb-amt871.azurewebsites.net/ |
		driver.get("https://dotnetappsqldb-amt871.azurewebsites.net/");
		// 2 | setWindowSize | 974x952 |
		driver.manage().window().setSize(new Dimension(974, 952));
		// 3 | click | linkText=Create New |
		driver.findElement(By.linkText("Create New")).click();
		// 4 | click | id=CreatedDate |
		driver.findElement(By.id("CreatedDate")).click();
		// 5 | type | id=CreatedDate | 2023-06-01
		driver.findElement(By.id("CreatedDate")).sendKeys("2023-06-01");
		// 6 | click | id=CreatedDate |
		driver.findElement(By.id("CreatedDate")).click();
		// 7 | type | id=CreatedDate | 'clear'
		driver.findElement(By.id("CreatedDate")).clear();
		// 8 | click | css=.btn |
		driver.findElement(By.cssSelector(".btn")).click();
		// 9 | mouseOver | css=.btn |
		{
			WebElement element = driver.findElement(By.cssSelector(".btn"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		// 10 | mouseOut | css=.btn |
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		// 11 | mouseUp | id=CreatedDate-error |
		{
//			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); // Espera hasta 10 segundos
//			WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("CreatedDate-error")));
			WebElement element = driver.findElement(By.id("CreatedDate-error"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).release().perform();
		}
		// 12 | assertElementPresent | id=CreatedDate-error |
		{
			List<WebElement> elements = driver.findElements(By.id("CreatedDate-error"));
			assert (elements.size() > 0);
		}
	}
}
